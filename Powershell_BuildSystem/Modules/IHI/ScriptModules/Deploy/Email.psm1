
#region Module initialize
# initialize the module: re/set and script-level variables to defaults
function Initialize {
  [CmdletBinding()]
  param()
  process {
  }
}
# initialize/reset the module
Initialize
# ensure best practices for variable use, function calling, null property access, etc.
# must be done at module script level, not inside Initialize, or will only be function scoped
Set-StrictMode -Version 2
#endregion


#region Functions: Send-IHIDeployEmail

<#
.SYNOPSIS
Sends an deploy email - error or success
.DESCRIPTION
Sends an deploy email - error or success.  If an error occurred, ErrorOccurred
should be passed and ErrorMessage should be specified.
.PARAMETER Time
Time the deploy processed was started
.PARAMETER ApplicationXmlPath
Local path to application xml file
.PARAMETER To
User(s) to send email to
.PARAMETER ApplicationName
Name of application
.PARAMETER Version
Version of application
.PARAMETER EnvironmentNickname
Environment nickname deploying to
.PARAMETER ServerName
Name of server deploying to
.PARAMETER DeployRunAsUserName
User the deploy process is running as locally
.PARAMETER DeployLaunchUserName
User that launched the process, may be different from DeployRunAsUserName
.PARAMETER LogFiles
Path to log file(s) generated by deploy
.PARAMETER ErrorOccurred
Specified if an error occurred during deployment
.PARAMETER ErrorMessage
Error message associated with the error
.EXAMPLE
Send-IHIDeployEmail (Get-Date) <path to app Xml> ksweeney@ihi.org TESTAPP
Sends a deploy-related email
#>
function Send-IHIDeployEmail {
  #region Function parameters
  [CmdletBinding()]
  param(
    # the ONLY required params are Time and ApplicationXmlPath
    # Depending on when the error is detected some or almost all of values may not 
    # be known but if the xml path isn't even known, no point in emailing about this error
    [Parameter(Mandatory = $true,ValueFromPipeline = $false)]
    [ValidateNotNullOrEmpty()]
    [datetime]$Time,
    [Parameter(Mandatory = $true,ValueFromPipeline = $false)]
    [ValidateNotNullOrEmpty()]
    [string]$ApplicationXmlPath,
    [Parameter(Mandatory = $false,ValueFromPipeline = $false)]
    [string[]]$To,
    [Parameter(Mandatory = $false,ValueFromPipeline = $false)]
    [string]$ApplicationName,
    [Parameter(Mandatory = $false,ValueFromPipeline = $false)]
    [string]$Version,
    [Parameter(Mandatory = $false,ValueFromPipeline = $false)]
    [string]$EnvironmentNickname,
    [Parameter(Mandatory = $false,ValueFromPipeline = $false)]
    [string]$ServerName,
    [Parameter(Mandatory = $false,ValueFromPipeline = $false)]
    [string]$DeployRunAsUserName,
    [Parameter(Mandatory = $false,ValueFromPipeline = $false)]
    [string]$DeployLaunchUserName,
    [Parameter(Mandatory = $false,ValueFromPipeline = $false)]
    [string[]]$LogFiles,
    [Parameter(Mandatory = $false,ValueFromPipeline = $false)]
    [switch]$ErrorOccurred,
    [Parameter(Mandatory = $false,ValueFromPipeline = $false)]
    [string]$ErrorMessage
  )
  #endregion
  process {
    #region Set UserInfo
    [string]$UserInfo = ""
    if ($DeployRunAsUserName -ne "") {
      $UserInfo = $DeployRunAsUserName
      if ($DeployRunAsUserName.ToUpper() -ne $DeployLaunchUserName.ToUpper()) {
        $UserInfo += " ($DeployLaunchUserName)"
      }
    }
    #endregion

    #region Set ServerInfo
    [string]$ServerInfo = ""
    if ($EnvironmentNickname -ne "") {
      $ServerInfo = $EnvironmentNickname
      if ($EnvironmentNickname.ToUpper() -ne $ServerName.ToUpper()) {
        $ServerInfo += " ($ServerName)"
      }
    }
    #endregion

    #region Set subject
    [string]$Subject = ""
    if ($ErrorOccurred) {
      # if application and version name not known yet, major issue with deploy, probably bad xml
      # in this case, just report xml path
      if ($ApplicationName -eq "" -and $Version -eq "") {
        $Subject = "major deploy error with $ApplicationXmlPath on $EnvironmentNickname"
      } else {
        $Subject = "$ApplicationName $Version *deploy error* to $ServerInfo by $UserInfo"
      }
    } else {
      $Subject = "$ApplicationName $Version deployed successfully to $ServerInfo by $UserInfo"
    }
    #endregion

    #region Set body first line
    [string]$BodyFirstLine = ""
    if ($ErrorOccurred) {
      $BodyFirstLine = "<TR><TD colspan=2 class='shaded'><h1>$ApplicationName $Version <font color='red'>*DEPLOY ERROR*</font> to $ServerInfo on $($Time.DayOfWeek) $($Time.ToString("G"))</h1></TD></TR>`n"
    } else {
      $BodyFirstLine = "<TR><TD colspan=2 class='shaded'><h1>$ApplicationName $Version deployed successfully to $ServerInfo on $($Time.DayOfWeek) $($Time.ToString("G"))</h1></TD></TR>`n"
    }
    #endregion

    #region Compose Body
    [System.Text.StringBuilder]$Body = New-Object System.Text.StringBuilder
    #region Add basic header and body / first line
    $Body.Append("<HTML>`n") > $null
    $Body.Append("<HEAD>`n") > $null
    $Body.Append((Get-IHIHtmlEmailCssStyle1)) > $null
    $Body.Append("</HEAD>`n") > $null
    $Body.Append("<BODY>`n") > $null
    $Body.Append("<TABLE cellpadding='0' cellspacing='0'>`n") > $null
    $Body.Append($BodyFirstLine) > $null
    #endregion

    #region Add basic body info if it exists
    if ($ApplicationName -ne "") {
      $Body.Append("<TR>`n") > $null
      $Body.Append("  <TD class='label'>" + "Application:" + "</TD>`n") > $null
      $Body.Append("  <TD>" + $ApplicationName + "</TD>`n") > $null
      $Body.Append("</TR>`n") > $null
    }
    if ($Version -ne "") {
      $Body.Append("<TR>`n") > $null
      $Body.Append("  <TD class='label'>" + "Version:" + "</TD>`n") > $null
      $Body.Append("  <TD>" + $Version + "</TD>`n") > $null
      $Body.Append("</TR>`n") > $null
    }
    if ($UserInfo -ne "") {
      $Body.Append("<TR>`n") > $null
      $Body.Append("  <TD class='label'>" + "User:" + "</TD>`n") > $null
      $Body.Append("  <TD>" + $UserInfo + "</TD>`n") > $null
      $Body.Append("</TR>`n") > $null
    }
    if ($ServerInfo -ne "") {
      $Body.Append("<TR>`n") > $null
      $Body.Append("  <TD class='label'>" + "Server:" + "</TD>`n") > $null
      $Body.Append("  <TD>" + $ServerInfo + "</TD>`n") > $null
      $Body.Append("</TR>`n") > $null
    }
    #endregion

    #region Add error info, if this is an error email
    # one thing we know about the error messages is that there tends to be a :: separator
    # between the main message and lower, repeated errors.  
    # also, for errors in scriptblocks, the script is surrounded by --> and <-- 
    # let's use this to put a new line <BR/> in the message for readability
    # also look for carriage return characters and replace with new line
    if ($ErrorOccurred) {
      $Body.Append("<TR>`n") > $null
      $Body.Append("  <TD class='label' valign='top'>" + "Error:" + "</TD>`n") > $null
      $ErrMsg = $ErrorMessage.Replace(" :: ","<BR/><BR/>").Replace("-->","<BR/><BR/>").Replace("<--","<BR/><BR/>").Replace("`r","<BR/>")
      $Body.Append("  <TD>" + $ErrMsg + "</TD>`n") > $null
      $Body.Append("</TR>`n") > $null
    }
    #endregion

    #region Lastly, add path to application xml if it's helpful
    $XmlName = Split-Path -Path $ApplicationXmlPath -Leaf
    $XmlParentFolderName = Split-Path -Path (Split-Path -Path $ApplicationXmlPath -Parent) -Leaf
    $XmlParentParentFolderName = Split-Path (Split-Path -Path (Split-Path -Path $ApplicationXmlPath -Parent) -Parent) -Leaf
    $Body.Append("<TR>`n") > $null
    $Body.Append("  <TD class='label'>" + "Deploy xml:" + "</TD>`n") > $null
    $Body.Append("  <TD>" + $Ihi:BuildDeploy.DeployShare + '\' + $XmlParentParentFolderName + '\' + $XmlParentFolderName + '\' + $XmlName + "</TD>`n") > $null
    $Body.Append("</TR>`n") > $null
    $Body.Append("</BODY>`n") > $null
    $Body.Append("</HTML>`n") > $null
    #endregion
    #endregion

    #region Send email
    # if To is null, use $Ihi:BuildDeploy.ErrorNotificationEmails
    if ($To -eq $null) {
      $To = $Ihi:BuildDeploy.ErrorNotificationEmails
    }
    # add basic params, always send emails from specific account
    [hashtable]$Params = @{ To = $To; Subject = $Subject; Body = $Body.ToString(); Attachments = $LogFiles; From = "DeployProcess@ihi.org" }
    # if error occurred, CC build managers
    if ($ErrorOccurred) {
      $Params.Cc = $Ihi:BuildDeploy.ErrorNotificationEmails
    }
    Send-IHIMailMessage @Params
    #endregion
  }
}
Export-ModuleMember -Function Send-IHIDeployEmail
#endregion
